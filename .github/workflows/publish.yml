name: "Test, Pack & Deploy"

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  BuildDirectory: ${{ github.workspace}}/build
  TagVersionPrefix: "v"

# on:
#   push:
#     branches:
#       - "master"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_tests:
    name: Test & Pack
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Dotnet Restore
      run: dotnet restore
    - name: Dotnet Build
      run: dotnet build --configuration Release --no-restore
    - name: Dotnet Test
      run:  dotnet test ./test/AKI.TelegramBot.UnitTests/AKI.TelegramBot.UnitTests.csproj --configuration Release --no-restore --no-build --collect "Code Coverage;Format=cobertura" --logger "trx;LogFileName=./test-results.trx"
    # - run: ls
    # - run: ls ./test/AKI.TelegramBot.UnitTests/TestResults
    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    -  name: Publish Test Report
       uses: dorny/test-reporter@v1
       if: always() # This ensures that the test report is published even if the test step fails
       with:
         name: 'Test Results'
         path: './test/AKI.TelegramBot.UnitTests/TestResults/test-results.trx'
         reporter: 'dotnet-trx'
    - name: Code Coverage Report
      uses: 5monkeys/cobertura-action@master
      with:
        path: ./**/TestResults/**/*.cobertura.xml
        minimum_coverage: 55
    - name: Define Version
      id: define_version
      run: |
          VERSION_MAJOR_MINOR="1.0"
          VERSION_SEARCH="${TagVersionPrefix}${VERSION_MAJOR_MINOR}"
          GIT_TAG_LIST=$(git tag --list "${VERSION_SEARCH}.*")
          echo "GIT_TAG_LIST: $GIT_TAG_LIST"
          if [ -z "$GIT_TAG_LIST" ]; then
              echo 'No tags found, setting patch as 0'
              VERSION_PATCH=0
          else
              VERSION_PATCH=$(( $(echo "$GIT_TAG_LIST" | sort -rV | head -n 1 | grep -oE '[0-9]+$') + 1 ))
          fi          
          echo "VERSION_PATCH: $VERSION_PATCH"
          FINAL_VERSION="${VERSION_MAJOR_MINOR}.${VERSION_PATCH}"
          echo "Version: $FINAL_VERSION"
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
    - name: Dotnet Pack
      run: dotnet pack --configuration Release --output ${{ env.BuildDirectory }} --no-restore --no-build --include-source --include-symbols /p:Version=$FINAL_VERSION
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        if-no-files-found: error
        retention-days: 7
        path: |
            ${{ env.BuildDirectory }}/*.nupkg
            ${{ env.BuildDirectory }}/*.snupkg
    outputs:
     final_version: ${{ steps.define_version.outputs.FINAL_VERSION }}

  push_nugets:
    name: Push Nugets
    runs-on: ubuntu-latest
    needs: build_tests
    if: github.ref == 'refs/heads/master'
    steps:
    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      # Download the NuGet package created in the previous job
    - uses: actions/download-artifact@v3
      with:
        name: build
        path: ${{ env.BuildDirectory }}
    - run:  ls
    - run:  ls ${{ env.BuildDirectory }}
    - name: Push NuGet packages
      run:  for file in ${{ env.BuildDirectory }}/*.nupkg; do dotnet nuget push "$file" --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate; done

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [push_nugets, build_tests]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set Git Tag
        run: |
             NEW_TAG="${TagVersionPrefix}${{needs.build_tests.outputs.final_version}}"
             echo "Tag name: $NEW_TAG"
             git config user.name "GitHub Actions"
             git config user.email "github-actions@users.noreply.github.com"
             git tag -a $NEW_TAG -m "Release version $NEW_TAG"
             git push origin --tags
             echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.NEW_TAG }}
          draft: false
          prerelease: false
